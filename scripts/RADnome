#!/usr/bin/env python
# encoding: utf-8


"""
File: RADnome.py
Author: Nicholas Crawford

Created by Nicholas Crawford on Mon Jun 17 15:35:51 PDT 2013
Copyright (c) 2012 Nicholas G. Crawford All rights reserved.

Description...

Add later.

"""

import sys; import os
sys.path.insert(0, os.path.abspath('..'))

import sys
import argparse
from RADnome.pipeline import *
from RADnome.GenerateRADnome import *



def generate_READnome(args):
    G = GenerateRADnome()
    G.make_pseudo_genome(args.infile, args.outfile, args.N_padding, args.run_name)
    G.self.make_log_file(args)


def generate_RADnome(args):
    G = GenerateRADnome()
    G.contigs_2_RADnome(args.readnomes[0], args.readnomes[1], args.contig_lengths[0],
                        args.contig_lengths[1], args.pickle_dict,
                        args.run_name, args.N_padding, args.insert_size,
                        args.min_proportion_single_locus)


def assoicate_contigs(args):
    M = MergeAssemblies()
    M.associate_contigs(args.sams[0], args.sams[1], args.pos_file, args.minimum_MAPQ)


def run_pipeline(args):
    P = RunPipeline()
    P.pipeline(
        args.fqs[0],
        args.fqs[1],
        args.run_name,
        args.N_padding,
        args.insert_padding,
        args.min_proportion_in_mode,
        args.min_overlap,
        args.cores)


def get_args():
    """Parse sys.argv"""

    parser = argparse.ArgumentParser(prog='RADnome')

    # --------------------------------------
    # SETUP SUB-PARSERS
    # --------------------------------------

    subparsers = parser.add_subparsers(title='subcommands',
                                       help='sub-command help')

    parser_READnome = subparsers.add_parser(
        'makeREADnome',
        help='Create pseudo-genome from single end reads assembled \
              with Rainbow (Chong 2012).')

    parser_ascContigs = subparsers.add_parser(
        'ascContigs',
        help='Match up contigs based on read mapping.')

    parser_RADnome = subparsers.add_parser(
        'makeRADnome',
        help='Create pseudo-genome for associated contigs.')

    parser_pipeline = subparsers.add_parser(
        'runPipeline',
        help='Run complete RADnome pipeline.')

    # --------------------------------------
    # SETUP READnome SUB-COMMAND
    # --------------------------------------

    parser_READnome.add_argument(
        '-n', '--N-padding',
        type=int,
        default=500,
        help="Number of N's to insert between each cluster/contig.")

    parser_READnome.add_argument(
        '-r', '--run-name',
        type=str,
        default='RADnome',
        help="Name of run. Becomes fasta name.")

    parser_READnome.add_argument(
        'infile',
        nargs='?',
        default=sys.stdin,
        help='Path to input. (default is STDIN)')

    parser_READnome.add_argument(
        'outfile',
        nargs='?',
        default=sys.stdout,
        help='Path to output. (default is STOUT)')

    # --------------------------------------
    # SETUP RADnome SUB-COMMAND
    # --------------------------------------

    parser_RADnome.add_argument(
        '-n', '--N-padding',
        type=int,
        default=500,
        help="Number of N's to insert between each cluster/contig.")

    parser_RADnome.add_argument(
        '-i', '--insert-size',
        type=int,
        default=50,
        help="Size of insert when libraries were generated. Used to deterimine\
              how many N's to insert between associated contigs.")

    parser_RADnome.add_argument(
        '-r', '--run-name',
        type=str,
        default='RADnome',
        help="Name of run. Becomes fasta name.")

    parser_RADnome.add_argument(
        '--readnomes',
        type=str,
        nargs=2,
        help="Forward and Reverse READnome files. Note that order matters.")

    parser_RADnome.add_argument(
        '--pickle-dict',
        type=str,
        default=None,
        help="'Pickled' dictionary from sam_index run.")

    parser_RADnome.add_argument(
        '-cl', '--contig-lengths',
        type=int,
        nargs=2,
        help="Length of contigs in forward and reverse files. Note that order matters.")

    parser_RADnome.add_argument(
        '-p', '--min-proportion-single-locus',
        type=float,
        default=0.8,
        help="Minimum proportion of reads associated to one locus.")

    # --------------------------------------
    # SETUP ascContigs SUB-COMMAND
    # --------------------------------------

    parser_ascContigs.add_argument(
        '-s', '--sams',
        type=str,
        nargs=2,
        help="Forward and Reverse SAM files. Note that order matters.")

    parser_ascContigs.add_argument(
        '-p', '--pos-file',
        type=str,
        help="Path to file containing start positions. Should match first SAM file.")

    parser_ascContigs.add_argument(
        '-mapq', '--minimum-MAPQ',
        type=int,
        default=3,
        help="Minimum mapping quality of query and hit.")

    parser_ascContigs.add_argument(
        '-r', '--run-name',
        type=str,
        default='RADnome',
        help="Name of run. Becomes fasta name.")

    # --------------------------------------
    # SETUP runPipeline SUB-COMMAND
    # --------------------------------------

    parser_pipeline.add_argument(
        '--fqs',
        type=str,
        nargs=2,
        help="Forward and reverse fastq files.")

    parser_pipeline.add_argument(
        '-r', '--run-name',
        type=str,
        default='RADnome',
        help="Name of run appended as prefix to output files.")

    parser_pipeline.add_argument(
        '-c', '--cores',
        type=int,
        default=1,
        help="Number of processor cores for bowtie2 to use.")

    parser_pipeline.add_argument(
        '-n', '--N-padding',
        type=int,
        default=500,
        help="Number of N's to insert between contigs.")

    parser_pipeline.add_argument(
        '-i', '--insert-padding',
        type=int,
        default=50,
        help="Number of N's to insert between associated contigs.")

    parser_pipeline.add_argument(
        '-p', '--min-proportion-in-mode',
        type=int,
        default=0.8,
        help="Minimun proportion of R2 reads that must align to \
              the contig with the most depth.")

    parser_pipeline.add_argument(
        '-o', '--min-overlap',
        type=int,
        default=10,
        help="Minimun number of bases that must overlap in \
              order to join contigs")

    parser_pipeline.add_argument(
        '-d', '--min-depth',
        type=int,
        default=10,
        help="Minimun number of reads present in each contig \
              necessary to join contigs.")

    parser_pipeline.add_argument(
        '-m', '--min-mapq',
        type=int,
        default=3,
        help="Minimun mapping quality (MAPQ) required for a read to \
             be considered when joining contigs.")

    # LOGIC TO SELECT AND RUN APPROPRIATE SUB-COMMAND.
    parser_READnome.set_defaults(func=generate_READnome)
    parser_ascContigs.set_defaults(func=assoicate_contigs)
    parser_RADnome.set_defaults(func=generate_RADnome)
    parser_pipeline.set_defaults(func=run_pipeline)

    args = parser.parse_args()
    args.func(args)
    return args

get_args()
